name: Terraform Pipeline

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - stag
  #     - prod
  # pull_request:
  #   branches:
  #     - '*'
  
  

permissions:
  contents: read

jobs:

  stag-terraform:
      if: startsWith(github.ref, 'refs/heads/stag')
      name: 'Stage-Terraform'
      runs-on: ubuntu-latest
      
      
      defaults:
        run:
          shell: bash
      
      env: 
        TF_VAR_db_host: ${{ secrets.DB_HOST_DEV }}
        TF_VAR_db_token: ${{ secrets.DB_TOKEN_DEV }}
        TF_VAR_git_token: ${{ secrets.GIT_TOKEN }}
        TF_VAR_aws_access_key: ${{ secrets.C5I_ACCESS_KEY }}
        TF_VAR_aws_secret_key: ${{ secrets.C5I_SECRET_KEY }}
        TF_VAR_branch_name: ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
      
      steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
        

      # Initialize a new or existing Terraform working directory creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terra
      - name: Terraform Plan
        run: terraform plan

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

  prod-terraform:
      if: startsWith(github.ref, 'refs/heads/prod')
      name: 'Prod-Terraform'
      runs-on: ubuntu-latest
      
      
      defaults:
        run:
          shell: bash
      
      env: 
        TF_VAR_db_host: ${{ secrets.DB_HOST_PROD }}
        TF_VAR_db_token: ${{ secrets.DB_TOKEN_PROD }}
        TF_VAR_git_token: ${{ secrets.GIT_TOKEN }}
        TF_VAR_aws_access_key: ${{ secrets.C5I_ACCESS_KEY }}
        TF_VAR_aws_secret_key: ${{ secrets.C5I_SECRET_KEY }}
        
      
      steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set TF_VAR_branch_name
        run: |
          echo "TF_VAR_branch_name=${{ github.ref }}" >> $GITHUB_ENV

      - name: Terraform setups
        uses: hashicorp/setup-terraform@v1
        

      # Initialize a new or existing Terraform working directory creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terra
      - name: Terraform Plan
        run: terraform plan

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

  


  
    

    

